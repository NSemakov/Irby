//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `first`.
    static let first = Rswift.ImageResource(bundle: R.hostingBundle, name: "first")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `second`.
    static let second = Rswift.ImageResource(bundle: R.hostingBundle, name: "second")
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static func first(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "second", bundle: ..., traitCollection: ...)`
    static func second(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.second, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "Cell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 7 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      /// Base translation: Value
      /// 
      /// Locales: Base, en
      static let key = Rswift.StringResource(key: "Key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation: Value
      /// 
      /// Locales: Base, en
      static func key(_: Void = ()) -> String {
        return NSLocalizedString("Key", bundle: R.hostingBundle, value: "Value", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizationAlert` struct is generated, and contains static references to 51 localization keys.
    struct localizationAlert {
      /// Base translation: SMS сервис недоступен
      /// 
      /// Locales: Base, en
      static let smsServiceNotAvailable = Rswift.StringResource(key: "SMSServiceNotAvailable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: В данный момент невозможно оставить отзыв.
      /// 
      /// Locales: Base, en
      static let leaveReviewNotAvailable = Rswift.StringResource(key: "LeaveReviewNotAvailable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: В разработке
      /// 
      /// Locales: Base, en
      static let titleWorkInProgress = Rswift.StringResource(key: "TitleWorkInProgress", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Вы действительно хотите выйти из вашего профиля %@ ?
      /// 
      /// Locales: Base, en
      static let areYouSureWantToExitFormat = Rswift.StringResource(key: "AreYouSureWantToExitFormat", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Вы действительно хотите удалить поездку?
      /// 
      /// Locales: Base, en
      static let areYouWantToDeleteRide = Rswift.StringResource(key: "AreYouWantToDeleteRide", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Вы уверены, что хотите очистить введённые данные?
      /// 
      /// Locales: Base, en
      static let areYouSureWantToRemoveRideParameters = Rswift.StringResource(key: "AreYouSureWantToRemoveRideParameters", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выбрать фото
      /// 
      /// Locales: Base, en
      static let actionChoose = Rswift.StringResource(key: "ActionChoose", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выход
      /// 
      /// Locales: Base, en
      static let titleExit = Rswift.StringResource(key: "TitleExit", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Для заказа такси выберите точку назначения
      /// 
      /// Locales: Base, en
      static let selectDestinationPoint = Rswift.StringResource(key: "SelectDestinationPoint", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Закрыть
      /// 
      /// Locales: Base, en
      static let actionClose = Rswift.StringResource(key: "ActionClose", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка при определении местоположения.
      /// 
      /// Locales: Base, en
      static let locationError = Rswift.StringResource(key: "LocationError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static let http406_NotAcceptable = Rswift.StringResource(key: "Http406_NotAcceptable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static let http422_UnprocessableEntity = Rswift.StringResource(key: "Http422_UnprocessableEntity", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static let http500_InternalServerError = Rswift.StringResource(key: "Http500_InternalServerError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static let http502_BadGateway = Rswift.StringResource(key: "Http502_BadGateway", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static let unexpectedHttpError = Rswift.StringResource(key: "UnexpectedHttpError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Извините, произошла ошибка.
      /// 
      /// Locales: Base, en
      static let http404_NotFound = Rswift.StringResource(key: "Http404_NotFound", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Информация
      /// 
      /// Locales: Base, en
      static let titleInformation = Rswift.StringResource(key: "TitleInformation", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Камера недоступна
      /// 
      /// Locales: Base, en
      static let cameraIsUnavailable = Rswift.StringResource(key: "CameraIsUnavailable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Невозможно активировать промокод.
      /// 
      /// Locales: Base, en
      static let promoErrorDefault = Rswift.StringResource(key: "PromoErrorDefault", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Невозможно совершить звонок
      /// 
      /// Locales: Base, en
      static let couldNotCall = Rswift.StringResource(key: "CouldNotCall", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Недоступно
      /// 
      /// Locales: Base, en
      static let titleHttp401_Unauthorized = Rswift.StringResource(key: "TitleHttp401_Unauthorized", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Недоступно
      /// 
      /// Locales: Base, en
      static let titleHttp403_Forbidden = Rswift.StringResource(key: "TitleHttp403_Forbidden", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Некорректно заполнено поле «%@»
      /// 
      /// Locales: Base, en
      static let textFieldIsNotValid = Rswift.StringResource(key: "TextFieldIsNotValid", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Нравится
      /// 
      /// Locales: Base, en
      static let good = Rswift.StringResource(key: "Good", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отмена
      /// 
      /// Locales: Base, en
      static let actionCancel = Rswift.StringResource(key: "ActionCancel", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оценить приложение
      /// 
      /// Locales: Base, en
      static let titleLeaveFeedback = Rswift.StringResource(key: "TitleLeaveFeedback", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static let titleError = Rswift.StringResource(key: "TitleError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static let titleHttp404_NotFound = Rswift.StringResource(key: "TitleHttp404_NotFound", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static let titleHttp406_NotAcceptable = Rswift.StringResource(key: "TitleHttp406_NotAcceptable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static let titleHttp422_UnprocessableEntity = Rswift.StringResource(key: "TitleHttp422_UnprocessableEntity", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static let titleHttp500_InternalServerError = Rswift.StringResource(key: "TitleHttp500_InternalServerError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static let titleHttp502_BadGateway = Rswift.StringResource(key: "TitleHttp502_BadGateway", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка в данных.
      /// 
      /// Locales: Base, en
      static let invalidResponse = Rswift.StringResource(key: "InvalidResponse", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ошибка загрузки.
      /// 
      /// Locales: Base, en
      static let loadingError = Rswift.StringResource(key: "LoadingError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Пожалуйста, выберите различные точки для создания маршрута.
      /// 
      /// Locales: Base, en
      static let rideOrderError = Rswift.StringResource(key: "RideOrderError", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Позвонить?
      /// 
      /// Locales: Base, en
      static let callPhoneNumber = Rswift.StringResource(key: "CallPhoneNumber", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Поле «%@» должно быть заполнено
      /// 
      /// Locales: Base, en
      static let textFieldIsEmpty = Rswift.StringResource(key: "TextFieldIsEmpty", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Похоже, что у Вас отключена геолокация. Для правильного определения Вашего местоположения рекомендуем её включить.
      /// 
      /// Locales: Base, en
      static let locationErrorDenied = Rswift.StringResource(key: "LocationErrorDenied", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Почтовый сервис недоступен.
      /// 
      /// Locales: Base, en
      static let mailServiceNotAvailable = Rswift.StringResource(key: "MailServiceNotAvailable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Проблемы с сетью. Пожалуйста, убедитесь, что мобильная сеть включена, и попробуйте ещё раз.
      /// 
      /// Locales: Base, en
      static let cannotAccessServer = Rswift.StringResource(key: "CannotAccessServer", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Проводятся работы по обновлению системы.
      /// 
      /// Locales: Base, en
      static let http503_ServiceUnavailable = Rswift.StringResource(key: "Http503_ServiceUnavailable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Просто супер
      /// 
      /// Locales: Base, en
      static let excellent = Rswift.StringResource(key: "Excellent", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Сделать фото
      /// 
      /// Locales: Base, en
      static let actionMake = Rswift.StringResource(key: "ActionMake", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Система обслуживается
      /// 
      /// Locales: Base, en
      static let titleHttp503_ServiceUnavailable = Rswift.StringResource(key: "TitleHttp503_ServiceUnavailable", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Сообщить о проблеме
      /// 
      /// Locales: Base, en
      static let reportProblem = Rswift.StringResource(key: "ReportProblem", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Требуется авторизация.
      /// 
      /// Locales: Base, en
      static let http401_Unauthorized = Rswift.StringResource(key: "Http401_Unauthorized", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: У вас отсутвуют права доступа к данному ресурсу.
      /// 
      /// Locales: Base, en
      static let http403_Forbidden = Rswift.StringResource(key: "Http403_Forbidden", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Удаление
      /// 
      /// Locales: Base, en
      static let titleRemoving = Rswift.StringResource(key: "TitleRemoving", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Удалить фото
      /// 
      /// Locales: Base, en
      static let actionDelete = Rswift.StringResource(key: "ActionDelete", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Функция будет доступна в будущих версиях приложения.
      /// 
      /// Locales: Base, en
      static let workInProgress = Rswift.StringResource(key: "WorkInProgress", tableName: "Localization+Alert", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation: SMS сервис недоступен
      /// 
      /// Locales: Base, en
      static func smsServiceNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("SMSServiceNotAvailable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "SMS сервис недоступен", comment: "")
      }
      
      /// Base translation: В данный момент невозможно оставить отзыв.
      /// 
      /// Locales: Base, en
      static func leaveReviewNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("LeaveReviewNotAvailable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "В данный момент невозможно оставить отзыв.", comment: "")
      }
      
      /// Base translation: В разработке
      /// 
      /// Locales: Base, en
      static func titleWorkInProgress(_: Void = ()) -> String {
        return NSLocalizedString("TitleWorkInProgress", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "В разработке", comment: "")
      }
      
      /// Base translation: Вы действительно хотите выйти из вашего профиля %@ ?
      /// 
      /// Locales: Base, en
      static func areYouSureWantToExitFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("AreYouSureWantToExitFormat", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Вы действительно хотите выйти из вашего профиля\n%@ ?", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Вы действительно хотите удалить поездку?
      /// 
      /// Locales: Base, en
      static func areYouWantToDeleteRide(_: Void = ()) -> String {
        return NSLocalizedString("AreYouWantToDeleteRide", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Вы действительно хотите удалить поездку?", comment: "")
      }
      
      /// Base translation: Вы уверены, что хотите очистить введённые данные?
      /// 
      /// Locales: Base, en
      static func areYouSureWantToRemoveRideParameters(_: Void = ()) -> String {
        return NSLocalizedString("AreYouSureWantToRemoveRideParameters", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Вы уверены, что хотите очистить введённые данные?", comment: "")
      }
      
      /// Base translation: Выбрать фото
      /// 
      /// Locales: Base, en
      static func actionChoose(_: Void = ()) -> String {
        return NSLocalizedString("ActionChoose", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Выбрать фото", comment: "")
      }
      
      /// Base translation: Выход
      /// 
      /// Locales: Base, en
      static func titleExit(_: Void = ()) -> String {
        return NSLocalizedString("TitleExit", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Выход", comment: "")
      }
      
      /// Base translation: Для заказа такси выберите точку назначения
      /// 
      /// Locales: Base, en
      static func selectDestinationPoint(_: Void = ()) -> String {
        return NSLocalizedString("SelectDestinationPoint", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Для заказа такси выберите точку назначения", comment: "")
      }
      
      /// Base translation: Закрыть
      /// 
      /// Locales: Base, en
      static func actionClose(_: Void = ()) -> String {
        return NSLocalizedString("ActionClose", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Закрыть", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка при определении местоположения.
      /// 
      /// Locales: Base, en
      static func locationError(_: Void = ()) -> String {
        return NSLocalizedString("LocationError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка при определении местоположения.", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static func http406_NotAcceptable(_: Void = ()) -> String {
        return NSLocalizedString("Http406_NotAcceptable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка, мы уже работаем над ее исправлением.", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static func http422_UnprocessableEntity(_: Void = ()) -> String {
        return NSLocalizedString("Http422_UnprocessableEntity", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка, мы уже работаем над ее исправлением.", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static func http500_InternalServerError(_: Void = ()) -> String {
        return NSLocalizedString("Http500_InternalServerError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка, мы уже работаем над ее исправлением.", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static func http502_BadGateway(_: Void = ()) -> String {
        return NSLocalizedString("Http502_BadGateway", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка, мы уже работаем над ее исправлением.", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка, мы уже работаем над ее исправлением.
      /// 
      /// Locales: Base, en
      static func unexpectedHttpError(_: Void = ()) -> String {
        return NSLocalizedString("UnexpectedHttpError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка, мы уже работаем над ее исправлением.", comment: "")
      }
      
      /// Base translation: Извините, произошла ошибка.
      /// 
      /// Locales: Base, en
      static func http404_NotFound(_: Void = ()) -> String {
        return NSLocalizedString("Http404_NotFound", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Извините, произошла ошибка.", comment: "")
      }
      
      /// Base translation: Информация
      /// 
      /// Locales: Base, en
      static func titleInformation(_: Void = ()) -> String {
        return NSLocalizedString("TitleInformation", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Информация", comment: "")
      }
      
      /// Base translation: Камера недоступна
      /// 
      /// Locales: Base, en
      static func cameraIsUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("CameraIsUnavailable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Камера недоступна", comment: "")
      }
      
      /// Base translation: Невозможно активировать промокод.
      /// 
      /// Locales: Base, en
      static func promoErrorDefault(_: Void = ()) -> String {
        return NSLocalizedString("PromoErrorDefault", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Невозможно активировать промокод.", comment: "")
      }
      
      /// Base translation: Невозможно совершить звонок
      /// 
      /// Locales: Base, en
      static func couldNotCall(_: Void = ()) -> String {
        return NSLocalizedString("CouldNotCall", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Невозможно совершить звонок", comment: "")
      }
      
      /// Base translation: Недоступно
      /// 
      /// Locales: Base, en
      static func titleHttp401_Unauthorized(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp401_Unauthorized", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Недоступно", comment: "")
      }
      
      /// Base translation: Недоступно
      /// 
      /// Locales: Base, en
      static func titleHttp403_Forbidden(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp403_Forbidden", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Недоступно", comment: "")
      }
      
      /// Base translation: Некорректно заполнено поле «%@»
      /// 
      /// Locales: Base, en
      static func textFieldIsNotValid(_ value1: String) -> String {
        return String(format: NSLocalizedString("TextFieldIsNotValid", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Некорректно заполнено поле «%@»", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Нравится
      /// 
      /// Locales: Base, en
      static func good(_: Void = ()) -> String {
        return NSLocalizedString("Good", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Нравится", comment: "")
      }
      
      /// Base translation: Отмена
      /// 
      /// Locales: Base, en
      static func actionCancel(_: Void = ()) -> String {
        return NSLocalizedString("ActionCancel", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Отмена", comment: "")
      }
      
      /// Base translation: Оценить приложение
      /// 
      /// Locales: Base, en
      static func titleLeaveFeedback(_: Void = ()) -> String {
        return NSLocalizedString("TitleLeaveFeedback", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Оценить приложение", comment: "")
      }
      
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static func titleError(_: Void = ()) -> String {
        return NSLocalizedString("TitleError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка", comment: "")
      }
      
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static func titleHttp404_NotFound(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp404_NotFound", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка", comment: "")
      }
      
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static func titleHttp406_NotAcceptable(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp406_NotAcceptable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка", comment: "")
      }
      
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static func titleHttp422_UnprocessableEntity(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp422_UnprocessableEntity", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка", comment: "")
      }
      
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static func titleHttp500_InternalServerError(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp500_InternalServerError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка", comment: "")
      }
      
      /// Base translation: Ошибка
      /// 
      /// Locales: Base, en
      static func titleHttp502_BadGateway(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp502_BadGateway", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка", comment: "")
      }
      
      /// Base translation: Ошибка в данных.
      /// 
      /// Locales: Base, en
      static func invalidResponse(_: Void = ()) -> String {
        return NSLocalizedString("InvalidResponse", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка в данных.", comment: "")
      }
      
      /// Base translation: Ошибка загрузки.
      /// 
      /// Locales: Base, en
      static func loadingError(_: Void = ()) -> String {
        return NSLocalizedString("LoadingError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Ошибка загрузки.", comment: "")
      }
      
      /// Base translation: Пожалуйста, выберите различные точки для создания маршрута.
      /// 
      /// Locales: Base, en
      static func rideOrderError(_: Void = ()) -> String {
        return NSLocalizedString("RideOrderError", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Пожалуйста, выберите различные точки для создания маршрута.", comment: "")
      }
      
      /// Base translation: Позвонить?
      /// 
      /// Locales: Base, en
      static func callPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("CallPhoneNumber", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Позвонить?", comment: "")
      }
      
      /// Base translation: Поле «%@» должно быть заполнено
      /// 
      /// Locales: Base, en
      static func textFieldIsEmpty(_ value1: String) -> String {
        return String(format: NSLocalizedString("TextFieldIsEmpty", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Поле «%@» должно быть заполнено", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Похоже, что у Вас отключена геолокация. Для правильного определения Вашего местоположения рекомендуем её включить.
      /// 
      /// Locales: Base, en
      static func locationErrorDenied(_: Void = ()) -> String {
        return NSLocalizedString("LocationErrorDenied", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Похоже, что у Вас отключена геолокация. Для правильного определения Вашего местоположения рекомендуем её включить.", comment: "")
      }
      
      /// Base translation: Почтовый сервис недоступен.
      /// 
      /// Locales: Base, en
      static func mailServiceNotAvailable(_: Void = ()) -> String {
        return NSLocalizedString("MailServiceNotAvailable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Почтовый сервис недоступен.", comment: "")
      }
      
      /// Base translation: Проблемы с сетью. Пожалуйста, убедитесь, что мобильная сеть включена, и попробуйте ещё раз.
      /// 
      /// Locales: Base, en
      static func cannotAccessServer(_: Void = ()) -> String {
        return NSLocalizedString("CannotAccessServer", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Проблемы с сетью. Пожалуйста, убедитесь, что мобильная сеть включена, и попробуйте ещё раз.", comment: "")
      }
      
      /// Base translation: Проводятся работы по обновлению системы.
      /// 
      /// Locales: Base, en
      static func http503_ServiceUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("Http503_ServiceUnavailable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Проводятся работы по обновлению системы.", comment: "")
      }
      
      /// Base translation: Просто супер
      /// 
      /// Locales: Base, en
      static func excellent(_: Void = ()) -> String {
        return NSLocalizedString("Excellent", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Просто супер", comment: "")
      }
      
      /// Base translation: Сделать фото
      /// 
      /// Locales: Base, en
      static func actionMake(_: Void = ()) -> String {
        return NSLocalizedString("ActionMake", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Сделать фото", comment: "")
      }
      
      /// Base translation: Система обслуживается
      /// 
      /// Locales: Base, en
      static func titleHttp503_ServiceUnavailable(_: Void = ()) -> String {
        return NSLocalizedString("TitleHttp503_ServiceUnavailable", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Система обслуживается", comment: "")
      }
      
      /// Base translation: Сообщить о проблеме
      /// 
      /// Locales: Base, en
      static func reportProblem(_: Void = ()) -> String {
        return NSLocalizedString("ReportProblem", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Сообщить о проблеме", comment: "")
      }
      
      /// Base translation: Требуется авторизация.
      /// 
      /// Locales: Base, en
      static func http401_Unauthorized(_: Void = ()) -> String {
        return NSLocalizedString("Http401_Unauthorized", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Требуется авторизация.", comment: "")
      }
      
      /// Base translation: У вас отсутвуют права доступа к данному ресурсу.
      /// 
      /// Locales: Base, en
      static func http403_Forbidden(_: Void = ()) -> String {
        return NSLocalizedString("Http403_Forbidden", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "У вас отсутвуют права доступа к данному ресурсу.", comment: "")
      }
      
      /// Base translation: Удаление
      /// 
      /// Locales: Base, en
      static func titleRemoving(_: Void = ()) -> String {
        return NSLocalizedString("TitleRemoving", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Удаление", comment: "")
      }
      
      /// Base translation: Удалить фото
      /// 
      /// Locales: Base, en
      static func actionDelete(_: Void = ()) -> String {
        return NSLocalizedString("ActionDelete", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Удалить фото", comment: "")
      }
      
      /// Base translation: Функция будет доступна в будущих версиях приложения.
      /// 
      /// Locales: Base, en
      static func workInProgress(_: Void = ()) -> String {
        return NSLocalizedString("WorkInProgress", tableName: "Localization+Alert", bundle: R.hostingBundle, value: "Функция будет доступна в будущих версиях приложения.", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizationButton` struct is generated, and contains static references to 31 localization keys.
    struct localizationButton {
      /// Base translation: Вызвал другое такси
      /// 
      /// Locales: Base, en
      static let catchTaxiOnStreet = Rswift.StringResource(key: "CatchTaxiOnStreet", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выход
      /// 
      /// Locales: Base, en
      static let logout = Rswift.StringResource(key: "Logout", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Готово
      /// 
      /// Locales: Base, en
      static let done = Rswift.StringResource(key: "Done", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Да
      /// 
      /// Locales: Base, en
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Далее
      /// 
      /// Locales: Base, en
      static let confirmAddress = Rswift.StringResource(key: "ConfirmAddress", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Дальше
      /// 
      /// Locales: Base, en
      static let further = Rswift.StringResource(key: "Further", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказал по ошибке
      /// 
      /// Locales: Base, en
      static let orderByError = Rswift.StringResource(key: "OrderByError", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказать такси
      /// 
      /// Locales: Base, en
      static let orderTaxi = Rswift.StringResource(key: "OrderTaxi", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Закрыть
      /// 
      /// Locales: Base, en
      static let close = Rswift.StringResource(key: "Close", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Изменить
      /// 
      /// Locales: Base, en
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Меню
      /// 
      /// Locales: Base, en
      static let menu = Rswift.StringResource(key: "Menu", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Настройки
      /// 
      /// Locales: Base, en
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Нет
      /// 
      /// Locales: Base, en
      static let no = Rswift.StringResource(key: "No", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Обновить
      /// 
      /// Locales: Base, en
      static let update = Rswift.StringResource(key: "Update", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ок
      /// 
      /// Locales: Base, en
      static let ok = Rswift.StringResource(key: "Ok", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отмена
      /// 
      /// Locales: Base, en
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отменить
      /// 
      /// Locales: Base, en
      static let cancelRide = Rswift.StringResource(key: "CancelRide", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отправить SMS водителю
      /// 
      /// Locales: Base, en
      static let sendSMSToDriver = Rswift.StringResource(key: "SendSMSToDriver", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Переименовать
      /// 
      /// Locales: Base, en
      static let rename = Rswift.StringResource(key: "Rename", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Повторить
      /// 
      /// Locales: Base, en
      static let repeatButton = Rswift.StringResource(key: "RepeatButton", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Повторить
      /// 
      /// Locales: Base, en
      static let retry = Rswift.StringResource(key: "Retry", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Позвонить водителю
      /// 
      /// Locales: Base, en
      static let callDriver = Rswift.StringResource(key: "CallDriver", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Позвонить диспетчеру
      /// 
      /// Locales: Base, en
      static let callDispatcher = Rswift.StringResource(key: "CallDispatcher", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Показать
      /// 
      /// Locales: Base, en
      static let show = Rswift.StringResource(key: "Show", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Привязать
      /// 
      /// Locales: Base, en
      static let tie = Rswift.StringResource(key: "Tie", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Продолжить
      /// 
      /// Locales: Base, en
      static let continueButton = Rswift.StringResource(key: "ContinueButton", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Пропустить
      /// 
      /// Locales: Base, en
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Связаться
      /// 
      /// Locales: Base, en
      static let contact = Rswift.StringResource(key: "Contact", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Слишком долго ждать
      /// 
      /// Locales: Base, en
      static let tooLongToWait = Rswift.StringResource(key: "TooLongToWait", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Сохранить
      /// 
      /// Locales: Base, en
      static let save = Rswift.StringResource(key: "Save", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Удалить
      /// 
      /// Locales: Base, en
      static let remove = Rswift.StringResource(key: "Remove", tableName: "Localization+Button", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation: Вызвал другое такси
      /// 
      /// Locales: Base, en
      static func catchTaxiOnStreet(_: Void = ()) -> String {
        return NSLocalizedString("CatchTaxiOnStreet", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Вызвал другое такси", comment: "")
      }
      
      /// Base translation: Выход
      /// 
      /// Locales: Base, en
      static func logout(_: Void = ()) -> String {
        return NSLocalizedString("Logout", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Выход", comment: "")
      }
      
      /// Base translation: Готово
      /// 
      /// Locales: Base, en
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Готово", comment: "")
      }
      
      /// Base translation: Да
      /// 
      /// Locales: Base, en
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Да", comment: "")
      }
      
      /// Base translation: Далее
      /// 
      /// Locales: Base, en
      static func confirmAddress(_: Void = ()) -> String {
        return NSLocalizedString("ConfirmAddress", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Далее", comment: "")
      }
      
      /// Base translation: Дальше
      /// 
      /// Locales: Base, en
      static func further(_: Void = ()) -> String {
        return NSLocalizedString("Further", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Дальше", comment: "")
      }
      
      /// Base translation: Заказал по ошибке
      /// 
      /// Locales: Base, en
      static func orderByError(_: Void = ()) -> String {
        return NSLocalizedString("OrderByError", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Заказал по ошибке", comment: "")
      }
      
      /// Base translation: Заказать такси
      /// 
      /// Locales: Base, en
      static func orderTaxi(_: Void = ()) -> String {
        return NSLocalizedString("OrderTaxi", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Заказать такси", comment: "")
      }
      
      /// Base translation: Закрыть
      /// 
      /// Locales: Base, en
      static func close(_: Void = ()) -> String {
        return NSLocalizedString("Close", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Закрыть", comment: "")
      }
      
      /// Base translation: Изменить
      /// 
      /// Locales: Base, en
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Изменить", comment: "")
      }
      
      /// Base translation: Меню
      /// 
      /// Locales: Base, en
      static func menu(_: Void = ()) -> String {
        return NSLocalizedString("Menu", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Меню", comment: "")
      }
      
      /// Base translation: Настройки
      /// 
      /// Locales: Base, en
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Настройки", comment: "")
      }
      
      /// Base translation: Нет
      /// 
      /// Locales: Base, en
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Нет", comment: "")
      }
      
      /// Base translation: Обновить
      /// 
      /// Locales: Base, en
      static func update(_: Void = ()) -> String {
        return NSLocalizedString("Update", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Обновить", comment: "")
      }
      
      /// Base translation: Ок
      /// 
      /// Locales: Base, en
      static func ok(_: Void = ()) -> String {
        return NSLocalizedString("Ok", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Ок", comment: "")
      }
      
      /// Base translation: Отмена
      /// 
      /// Locales: Base, en
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Отмена", comment: "")
      }
      
      /// Base translation: Отменить
      /// 
      /// Locales: Base, en
      static func cancelRide(_: Void = ()) -> String {
        return NSLocalizedString("CancelRide", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Отменить", comment: "")
      }
      
      /// Base translation: Отправить SMS водителю
      /// 
      /// Locales: Base, en
      static func sendSMSToDriver(_: Void = ()) -> String {
        return NSLocalizedString("SendSMSToDriver", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Отправить SMS водителю", comment: "")
      }
      
      /// Base translation: Переименовать
      /// 
      /// Locales: Base, en
      static func rename(_: Void = ()) -> String {
        return NSLocalizedString("Rename", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Переименовать", comment: "")
      }
      
      /// Base translation: Повторить
      /// 
      /// Locales: Base, en
      static func repeatButton(_: Void = ()) -> String {
        return NSLocalizedString("RepeatButton", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Повторить", comment: "")
      }
      
      /// Base translation: Повторить
      /// 
      /// Locales: Base, en
      static func retry(_: Void = ()) -> String {
        return NSLocalizedString("Retry", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Повторить", comment: "")
      }
      
      /// Base translation: Позвонить водителю
      /// 
      /// Locales: Base, en
      static func callDriver(_: Void = ()) -> String {
        return NSLocalizedString("CallDriver", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Позвонить водителю", comment: "")
      }
      
      /// Base translation: Позвонить диспетчеру
      /// 
      /// Locales: Base, en
      static func callDispatcher(_: Void = ()) -> String {
        return NSLocalizedString("CallDispatcher", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Позвонить диспетчеру", comment: "")
      }
      
      /// Base translation: Показать
      /// 
      /// Locales: Base, en
      static func show(_: Void = ()) -> String {
        return NSLocalizedString("Show", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Показать", comment: "")
      }
      
      /// Base translation: Привязать
      /// 
      /// Locales: Base, en
      static func tie(_: Void = ()) -> String {
        return NSLocalizedString("Tie", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Привязать", comment: "")
      }
      
      /// Base translation: Продолжить
      /// 
      /// Locales: Base, en
      static func continueButton(_: Void = ()) -> String {
        return NSLocalizedString("ContinueButton", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Продолжить", comment: "")
      }
      
      /// Base translation: Пропустить
      /// 
      /// Locales: Base, en
      static func skip(_: Void = ()) -> String {
        return NSLocalizedString("Skip", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Пропустить", comment: "")
      }
      
      /// Base translation: Связаться
      /// 
      /// Locales: Base, en
      static func contact(_: Void = ()) -> String {
        return NSLocalizedString("Contact", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Связаться", comment: "")
      }
      
      /// Base translation: Слишком долго ждать
      /// 
      /// Locales: Base, en
      static func tooLongToWait(_: Void = ()) -> String {
        return NSLocalizedString("TooLongToWait", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Слишком долго ждать", comment: "")
      }
      
      /// Base translation: Сохранить
      /// 
      /// Locales: Base, en
      static func save(_: Void = ()) -> String {
        return NSLocalizedString("Save", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Сохранить", comment: "")
      }
      
      /// Base translation: Удалить
      /// 
      /// Locales: Base, en
      static func remove(_: Void = ()) -> String {
        return NSLocalizedString("Remove", tableName: "Localization+Button", bundle: R.hostingBundle, value: "Удалить", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizationLabel` struct is generated, and contains static references to 43 localization keys.
    struct localizationLabel {
      /// Base translation:  Вы получите уведомление об этом.
      /// 
      /// Locales: Base, en
      static let driverDeferredOrderPart2 = Rswift.StringResource(key: "DriverDeferredOrderPart2", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ в %@
      /// 
      /// Locales: Base, en
      static let dateAtTimeFormat = Rswift.StringResource(key: "DateAtTimeFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ для iOS
      /// 
      /// Locales: Base, en
      static let appNameFormat = Rswift.StringResource(key: "AppNameFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: %@ к %@.
      /// 
      /// Locales: Base, en
      static let driverDeferredOrderDateFormat = Rswift.StringResource(key: "DriverDeferredOrderDateFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Вам придет SMS для подтверждения регистрации.
      /// 
      /// Locales: Base, en
      static let smsWillComeForConfirmation = Rswift.StringResource(key: "SMSWillComeForConfirmation", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ваш комментарий
      /// 
      /// Locales: Base, en
      static let yourComment = Rswift.StringResource(key: "YourComment", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ваша скидка — %.2g%%
      /// 
      /// Locales: Base, en
      static let yourDiscountFormat = Rswift.StringResource(key: "YourDiscountFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Введите ваш номер телефона
      /// 
      /// Locales: Base, en
      static let inputYourNumber = Rswift.StringResource(key: "InputYourNumber", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Водитель
      /// 
      /// Locales: Base, en
      static let driver = Rswift.StringResource(key: "Driver", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Водитель позвонит и уточнит, куда подъехать.
      /// 
      /// Locales: Base, en
      static let driverWillCallAndSpecify = Rswift.StringResource(key: "DriverWillCallAndSpecify", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Водитель прибудет 
      /// 
      /// Locales: Base, en
      static let driverDeferredOrderPart1 = Rswift.StringResource(key: "DriverDeferredOrderPart1", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выберите точку
      /// 
      /// Locales: Base, en
      static let selectPoint = Rswift.StringResource(key: "SelectPoint", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выслать повторно
      /// 
      /// Locales: Base, en
      static let sendSmsAgain = Rswift.StringResource(key: "SendSmsAgain", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выслать повторно (%d)
      /// 
      /// Locales: Base, en
      static let sendSmsAgainFormat = Rswift.StringResource(key: "SendSmsAgainFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Доступна новая версия приложения %@. Пожалуйста, обновитесь до версии %@
      /// 
      /// Locales: Base, en
      static let applicationUpdateMessageFormat = Rswift.StringResource(key: "ApplicationUpdateMessageFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ждите…
      /// 
      /// Locales: Base, en
      static let hudWaiting = Rswift.StringResource(key: "HUDWaiting", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Загрузка
      /// 
      /// Locales: Base, en
      static let hudLoading = Rswift.StringResource(key: "HUDLoading", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Загрузка данных…
      /// 
      /// Locales: Base, en
      static let hudDataLoading = Rswift.StringResource(key: "HUDDataLoading", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ завершен
      /// 
      /// Locales: Base, en
      static let rideStatusCompleted = Rswift.StringResource(key: "RideStatusCompleted", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ отменен
      /// 
      /// Locales: Base, en
      static let rideStatusCancelled = Rswift.StringResource(key: "RideStatusCancelled", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ такси
      /// 
      /// Locales: Base, en
      static let taxiOrder = Rswift.StringResource(key: "TaxiOrder", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ такси в Риге круглосуточно. Скидки для постоянных клиентов, бонусная программа.
      /// 
      /// Locales: Base, en
      static let aboutApplicationRiga = Rswift.StringResource(key: "AboutApplicationRiga", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ такси в Санкт-Петербурге круглосуточно. Скидки для постоянных клиентов, бонусная программа.
      /// 
      /// Locales: Base, en
      static let aboutApplicationSpb = Rswift.StringResource(key: "AboutApplicationSpb", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказать такси
      /// 
      /// Locales: Base, en
      static let performOrder = Rswift.StringResource(key: "PerformOrder", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Зачислено %@
      /// 
      /// Locales: Base, en
      static let moneyAmountFormat = Rswift.StringResource(key: "MoneyAmountFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Комментарий
      /// 
      /// Locales: Base, en
      static let addComment = Rswift.StringResource(key: "AddComment", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: На номер %@ выслано SMS с кодом
      /// 
      /// Locales: Base, en
      static let smsSentFormat = Rswift.StringResource(key: "SMSSentFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Наличными
      /// 
      /// Locales: Base, en
      static let cashPayment = Rswift.StringResource(key: "CashPayment", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Наслаждаться поездкой в такси легче, чем кажется
      /// 
      /// Locales: Base, en
      static let splashScreenText3 = Rswift.StringResource(key: "SplashScreenText3", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Не удалось определить адрес
      /// 
      /// Locales: Base, en
      static let geocodeError = Rswift.StringResource(key: "GeocodeError", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Не удалось привязать карту
      /// 
      /// Locales: Base, en
      static let paymentCardBindingError = Rswift.StringResource(key: "PaymentCardBindingError", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Новая цена заказа %@
      /// 
      /// Locales: Base, en
      static let rideUpdatedPriceMessageFormat = Rswift.StringResource(key: "RideUpdatedPriceMessageFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Получайте скидки, сохраняйте любимые адреса и заказывайте такси быстрее
      /// 
      /// Locales: Base, en
      static let getSales = Rswift.StringResource(key: "GetSales", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Приложение %@ на App Store
      /// 
      /// Locales: Base, en
      static let taxiAppOnAppStoreFormat = Rswift.StringResource(key: "TaxiAppOnAppStoreFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Проверьте, правильно ли введен код
      /// 
      /// Locales: Base, en
      static let wrongCode = Rswift.StringResource(key: "WrongCode", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Свобода передвижения
      /// 
      /// Locales: Base, en
      static let splashScreenText1 = Rswift.StringResource(key: "SplashScreenText1", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Сейчас
      /// 
      /// Locales: Base, en
      static let asSoonAsPossible = Rswift.StringResource(key: "AsSoonAsPossible", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Спасибо за обратную связь! Ваше сообщение отправлено в нашу IT-службу.
      /// 
      /// Locales: Base, en
      static let thankYouForProblemReport = Rswift.StringResource(key: "ThankYouForProblemReport", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Спасибо за отзыв
      /// 
      /// Locales: Base, en
      static let thankYouForFeedback = Rswift.StringResource(key: "ThankYouForFeedback", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Такси с лёгким характером
      /// 
      /// Locales: Base, en
      static let splashScreenText2 = Rswift.StringResource(key: "SplashScreenText2", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: У вашей карты %@ истёк срок действия. Привязать новую карту?
      /// 
      /// Locales: Base, en
      static let paymentCardIsExpiredFormat = Rswift.StringResource(key: "PaymentCardIsExpiredFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: версия %@
      /// 
      /// Locales: Base, en
      static let appVersionFormat = Rswift.StringResource(key: "AppVersionFormat", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: мин
      /// 
      /// Locales: Base, en
      static let min = Rswift.StringResource(key: "Min", tableName: "Localization+Label", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation:  Вы получите уведомление об этом.
      /// 
      /// Locales: Base, en
      static func driverDeferredOrderPart2(_: Void = ()) -> String {
        return NSLocalizedString("DriverDeferredOrderPart2", tableName: "Localization+Label", bundle: R.hostingBundle, value: "\nВы получите уведомление об этом.", comment: "")
      }
      
      /// Base translation: %@ в %@
      /// 
      /// Locales: Base, en
      static func dateAtTimeFormat(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("DateAtTimeFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "%@ в %@", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: %@ для iOS
      /// 
      /// Locales: Base, en
      static func appNameFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("AppNameFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "%@ для iOS", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: %@ к %@.
      /// 
      /// Locales: Base, en
      static func driverDeferredOrderDateFormat(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("DriverDeferredOrderDateFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "%@ к %@.", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: Вам придет SMS для подтверждения регистрации.
      /// 
      /// Locales: Base, en
      static func smsWillComeForConfirmation(_: Void = ()) -> String {
        return NSLocalizedString("SMSWillComeForConfirmation", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Вам придет SMS для подтверждения регистрации.", comment: "")
      }
      
      /// Base translation: Ваш комментарий
      /// 
      /// Locales: Base, en
      static func yourComment(_: Void = ()) -> String {
        return NSLocalizedString("YourComment", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Ваш комментарий", comment: "")
      }
      
      /// Base translation: Ваша скидка — %.2g%%
      /// 
      /// Locales: Base, en
      static func yourDiscountFormat(_ value1: Double) -> String {
        return String(format: NSLocalizedString("YourDiscountFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Ваша скидка — %.2g%%", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Введите ваш номер телефона
      /// 
      /// Locales: Base, en
      static func inputYourNumber(_: Void = ()) -> String {
        return NSLocalizedString("InputYourNumber", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Введите ваш номер телефона", comment: "")
      }
      
      /// Base translation: Водитель
      /// 
      /// Locales: Base, en
      static func driver(_: Void = ()) -> String {
        return NSLocalizedString("Driver", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Водитель", comment: "")
      }
      
      /// Base translation: Водитель позвонит и уточнит, куда подъехать.
      /// 
      /// Locales: Base, en
      static func driverWillCallAndSpecify(_: Void = ()) -> String {
        return NSLocalizedString("DriverWillCallAndSpecify", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Водитель позвонит и уточнит, куда подъехать.", comment: "")
      }
      
      /// Base translation: Водитель прибудет 
      /// 
      /// Locales: Base, en
      static func driverDeferredOrderPart1(_: Void = ()) -> String {
        return NSLocalizedString("DriverDeferredOrderPart1", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Водитель прибудет ", comment: "")
      }
      
      /// Base translation: Выберите точку
      /// 
      /// Locales: Base, en
      static func selectPoint(_: Void = ()) -> String {
        return NSLocalizedString("SelectPoint", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Выберите точку", comment: "")
      }
      
      /// Base translation: Выслать повторно
      /// 
      /// Locales: Base, en
      static func sendSmsAgain(_: Void = ()) -> String {
        return NSLocalizedString("SendSmsAgain", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Выслать повторно", comment: "")
      }
      
      /// Base translation: Выслать повторно (%d)
      /// 
      /// Locales: Base, en
      static func sendSmsAgainFormat(_ value1: Int) -> String {
        return String(format: NSLocalizedString("SendSmsAgainFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Выслать повторно (%d)", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Доступна новая версия приложения %@. Пожалуйста, обновитесь до версии %@
      /// 
      /// Locales: Base, en
      static func applicationUpdateMessageFormat(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("ApplicationUpdateMessageFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Доступна новая версия приложения %@. Пожалуйста,\nобновитесь до версии %@", comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: Ждите…
      /// 
      /// Locales: Base, en
      static func hudWaiting(_: Void = ()) -> String {
        return NSLocalizedString("HUDWaiting", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Ждите…", comment: "")
      }
      
      /// Base translation: Загрузка
      /// 
      /// Locales: Base, en
      static func hudLoading(_: Void = ()) -> String {
        return NSLocalizedString("HUDLoading", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Загрузка", comment: "")
      }
      
      /// Base translation: Загрузка данных…
      /// 
      /// Locales: Base, en
      static func hudDataLoading(_: Void = ()) -> String {
        return NSLocalizedString("HUDDataLoading", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Загрузка данных…", comment: "")
      }
      
      /// Base translation: Заказ завершен
      /// 
      /// Locales: Base, en
      static func rideStatusCompleted(_: Void = ()) -> String {
        return NSLocalizedString("RideStatusCompleted", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Заказ завершен", comment: "")
      }
      
      /// Base translation: Заказ отменен
      /// 
      /// Locales: Base, en
      static func rideStatusCancelled(_: Void = ()) -> String {
        return NSLocalizedString("RideStatusCancelled", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Заказ отменен", comment: "")
      }
      
      /// Base translation: Заказ такси
      /// 
      /// Locales: Base, en
      static func taxiOrder(_: Void = ()) -> String {
        return NSLocalizedString("TaxiOrder", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Заказ такси", comment: "")
      }
      
      /// Base translation: Заказ такси в Риге круглосуточно. Скидки для постоянных клиентов, бонусная программа.
      /// 
      /// Locales: Base, en
      static func aboutApplicationRiga(_: Void = ()) -> String {
        return NSLocalizedString("AboutApplicationRiga", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Заказ такси в Риге круглосуточно. Скидки для постоянных клиентов, бонусная программа.", comment: "")
      }
      
      /// Base translation: Заказ такси в Санкт-Петербурге круглосуточно. Скидки для постоянных клиентов, бонусная программа.
      /// 
      /// Locales: Base, en
      static func aboutApplicationSpb(_: Void = ()) -> String {
        return NSLocalizedString("AboutApplicationSpb", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Заказ такси в Санкт-Петербурге круглосуточно. Скидки для постоянных клиентов, бонусная программа.", comment: "")
      }
      
      /// Base translation: Заказать такси
      /// 
      /// Locales: Base, en
      static func performOrder(_: Void = ()) -> String {
        return NSLocalizedString("PerformOrder", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Заказать такси", comment: "")
      }
      
      /// Base translation: Зачислено %@
      /// 
      /// Locales: Base, en
      static func moneyAmountFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("MoneyAmountFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Зачислено %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Комментарий
      /// 
      /// Locales: Base, en
      static func addComment(_: Void = ()) -> String {
        return NSLocalizedString("AddComment", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Комментарий", comment: "")
      }
      
      /// Base translation: На номер %@ выслано SMS с кодом
      /// 
      /// Locales: Base, en
      static func smsSentFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("SMSSentFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "На номер %@ выслано SMS с кодом", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Наличными
      /// 
      /// Locales: Base, en
      static func cashPayment(_: Void = ()) -> String {
        return NSLocalizedString("CashPayment", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Наличными", comment: "")
      }
      
      /// Base translation: Наслаждаться поездкой в такси легче, чем кажется
      /// 
      /// Locales: Base, en
      static func splashScreenText3(_: Void = ()) -> String {
        return NSLocalizedString("SplashScreenText3", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Наслаждаться\nпоездкой в такси\nлегче, чем\nкажется", comment: "")
      }
      
      /// Base translation: Не удалось определить адрес
      /// 
      /// Locales: Base, en
      static func geocodeError(_: Void = ()) -> String {
        return NSLocalizedString("GeocodeError", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Не удалось определить адрес", comment: "")
      }
      
      /// Base translation: Не удалось привязать карту
      /// 
      /// Locales: Base, en
      static func paymentCardBindingError(_: Void = ()) -> String {
        return NSLocalizedString("PaymentCardBindingError", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Не удалось привязать карту", comment: "")
      }
      
      /// Base translation: Новая цена заказа %@
      /// 
      /// Locales: Base, en
      static func rideUpdatedPriceMessageFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("RideUpdatedPriceMessageFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Новая цена заказа %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Получайте скидки, сохраняйте любимые адреса и заказывайте такси быстрее
      /// 
      /// Locales: Base, en
      static func getSales(_: Void = ()) -> String {
        return NSLocalizedString("GetSales", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Получайте скидки, сохраняйте любимые адреса и заказывайте такси быстрее", comment: "")
      }
      
      /// Base translation: Приложение %@ на App Store
      /// 
      /// Locales: Base, en
      static func taxiAppOnAppStoreFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("TaxiAppOnAppStoreFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Приложение %@ на App Store", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Проверьте, правильно ли введен код
      /// 
      /// Locales: Base, en
      static func wrongCode(_: Void = ()) -> String {
        return NSLocalizedString("WrongCode", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Проверьте, правильно ли введен код", comment: "")
      }
      
      /// Base translation: Свобода передвижения
      /// 
      /// Locales: Base, en
      static func splashScreenText1(_: Void = ()) -> String {
        return NSLocalizedString("SplashScreenText1", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Свобода\nпередвижения", comment: "")
      }
      
      /// Base translation: Сейчас
      /// 
      /// Locales: Base, en
      static func asSoonAsPossible(_: Void = ()) -> String {
        return NSLocalizedString("AsSoonAsPossible", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Сейчас", comment: "")
      }
      
      /// Base translation: Спасибо за обратную связь! Ваше сообщение отправлено в нашу IT-службу.
      /// 
      /// Locales: Base, en
      static func thankYouForProblemReport(_: Void = ()) -> String {
        return NSLocalizedString("ThankYouForProblemReport", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Спасибо за обратную связь!\nВаше сообщение отправлено в нашу IT-службу.", comment: "")
      }
      
      /// Base translation: Спасибо за отзыв
      /// 
      /// Locales: Base, en
      static func thankYouForFeedback(_: Void = ()) -> String {
        return NSLocalizedString("ThankYouForFeedback", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Спасибо за отзыв", comment: "")
      }
      
      /// Base translation: Такси с лёгким характером
      /// 
      /// Locales: Base, en
      static func splashScreenText2(_: Void = ()) -> String {
        return NSLocalizedString("SplashScreenText2", tableName: "Localization+Label", bundle: R.hostingBundle, value: "Такси с лёгким\nхарактером", comment: "")
      }
      
      /// Base translation: У вашей карты %@ истёк срок действия. Привязать новую карту?
      /// 
      /// Locales: Base, en
      static func paymentCardIsExpiredFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("PaymentCardIsExpiredFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "У вашей карты %@ истёк срок действия.\nПривязать новую карту?", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: версия %@
      /// 
      /// Locales: Base, en
      static func appVersionFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("AppVersionFormat", tableName: "Localization+Label", bundle: R.hostingBundle, value: "версия %@", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: мин
      /// 
      /// Locales: Base, en
      static func min(_: Void = ()) -> String {
        return NSLocalizedString("Min", tableName: "Localization+Label", bundle: R.hostingBundle, value: "мин", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizationTextField` struct is generated, and contains static references to 4 localization keys.
    struct localizationTextField {
      /// Base translation: Email
      /// 
      /// Locales: Base, en
      static let email = Rswift.StringResource(key: "Email", tableName: "Localization+TextField", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Имя пользователя
      /// 
      /// Locales: Base, en
      static let username = Rswift.StringResource(key: "Username", tableName: "Localization+TextField", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Код из SMS
      /// 
      /// Locales: Base, en
      static let otp = Rswift.StringResource(key: "Otp", tableName: "Localization+TextField", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Номер телефона
      /// 
      /// Locales: Base, en
      static let phoneNumber = Rswift.StringResource(key: "PhoneNumber", tableName: "Localization+TextField", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation: Email
      /// 
      /// Locales: Base, en
      static func email(_: Void = ()) -> String {
        return NSLocalizedString("Email", tableName: "Localization+TextField", bundle: R.hostingBundle, value: "Email", comment: "")
      }
      
      /// Base translation: Имя пользователя
      /// 
      /// Locales: Base, en
      static func username(_: Void = ()) -> String {
        return NSLocalizedString("Username", tableName: "Localization+TextField", bundle: R.hostingBundle, value: "Имя пользователя", comment: "")
      }
      
      /// Base translation: Код из SMS
      /// 
      /// Locales: Base, en
      static func otp(_: Void = ()) -> String {
        return NSLocalizedString("Otp", tableName: "Localization+TextField", bundle: R.hostingBundle, value: "Код из SMS", comment: "")
      }
      
      /// Base translation: Номер телефона
      /// 
      /// Locales: Base, en
      static func phoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("PhoneNumber", tableName: "Localization+TextField", bundle: R.hostingBundle, value: "Номер телефона", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizationTitle` struct is generated, and contains static references to 29 localization keys.
    struct localizationTitle {
      /// Base translation: Аэропорты и вокзалы
      /// 
      /// Locales: Base, en
      static let airportsnRailways = Rswift.StringResource(key: "AirportsnRailways", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Введите промокод
      /// 
      /// Locales: Base, en
      static let enterPromo = Rswift.StringResource(key: "EnterPromo", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Время подачи
      /// 
      /// Locales: Base, en
      static let timeChoice = Rswift.StringResource(key: "TimeChoice", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выберите адрес на карте
      /// 
      /// Locales: Base, en
      static let geoPointSelector = Rswift.StringResource(key: "GeoPointSelector", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выполняется заказ
      /// 
      /// Locales: Base, en
      static let inProgressRideStatus = Rswift.StringResource(key: "InProgressRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выполняется назначение авто
      /// 
      /// Locales: Base, en
      static let newRideStatus = Rswift.StringResource(key: "NewRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавить карту
      /// 
      /// Locales: Base, en
      static let addCard = Rswift.StringResource(key: "AddCard", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Доп. услуги (+ %@)
      /// 
      /// Locales: Base, en
      static let additionalServicesFormat = Rswift.StringResource(key: "AdditionalServicesFormat", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Дополнительные услуги
      /// 
      /// Locales: Base, en
      static let additionalServices = Rswift.StringResource(key: "AdditionalServices", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Доступно обновление
      /// 
      /// Locales: Base, en
      static let appUpdateAlailable = Rswift.StringResource(key: "AppUpdateAlailable", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ принят
      /// 
      /// Locales: Base, en
      static let orderAcceptedNewRideStatus = Rswift.StringResource(key: "OrderAcceptedNewRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказ такси
      /// 
      /// Locales: Base, en
      static let taxiOrder = Rswift.StringResource(key: "TaxiOrder", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Зачислены средства
      /// 
      /// Locales: Base, en
      static let moneyHaveCome = Rswift.StringResource(key: "MoneyHaveCome", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: История поездок
      /// 
      /// Locales: Base, en
      static let ridesHistory = Rswift.StringResource(key: "RidesHistory", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: К вам едет автомобиль
      /// 
      /// Locales: Base, en
      static let acceptedRideStatus = Rswift.StringResource(key: "AcceptedRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Комментарий
      /// 
      /// Locales: Base, en
      static let message = Rswift.StringResource(key: "Message", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Комментарий для водителя
      /// 
      /// Locales: Base, en
      static let messageForDriver = Rswift.StringResource(key: "MessageForDriver", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Любимые адреса
      /// 
      /// Locales: Base, en
      static let places = Rswift.StringResource(key: "Places", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Настройки
      /// 
      /// Locales: Base, en
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Настройки push
      /// 
      /// Locales: Base, en
      static let pushSettings = Rswift.StringResource(key: "PushSettings", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: О приложении
      /// 
      /// Locales: Base, en
      static let aboutApp = Rswift.StringResource(key: "AboutApp", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оплата
      /// 
      /// Locales: Base, en
      static let payment = Rswift.StringResource(key: "Payment", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оставьте отзыв
      /// 
      /// Locales: Base, en
      static let feedback = Rswift.StringResource(key: "Feedback", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Откуда поедем
      /// 
      /// Locales: Base, en
      static let fromAddress = Rswift.StringResource(key: "FromAddress", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оцените поездку
      /// 
      /// Locales: Base, en
      static let evaluateRide = Rswift.StringResource(key: "EvaluateRide", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Поездка отменена
      /// 
      /// Locales: Base, en
      static let rideCancelled = Rswift.StringResource(key: "RideCancelled", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Промокоды
      /// 
      /// Locales: Base, en
      static let promo = Rswift.StringResource(key: "Promo", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Профиль
      /// 
      /// Locales: Base, en
      static let profile = Rswift.StringResource(key: "Profile", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Такси подано!
      /// 
      /// Locales: Base, en
      static let arrivedRideStatus = Rswift.StringResource(key: "ArrivedRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation: Аэропорты и вокзалы
      /// 
      /// Locales: Base, en
      static func airportsnRailways(_: Void = ()) -> String {
        return NSLocalizedString("AirportsnRailways", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Аэропорты и вокзалы", comment: "")
      }
      
      /// Base translation: Введите промокод
      /// 
      /// Locales: Base, en
      static func enterPromo(_: Void = ()) -> String {
        return NSLocalizedString("EnterPromo", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Введите промокод", comment: "")
      }
      
      /// Base translation: Время подачи
      /// 
      /// Locales: Base, en
      static func timeChoice(_: Void = ()) -> String {
        return NSLocalizedString("TimeChoice", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Время подачи", comment: "")
      }
      
      /// Base translation: Выберите адрес на карте
      /// 
      /// Locales: Base, en
      static func geoPointSelector(_: Void = ()) -> String {
        return NSLocalizedString("GeoPointSelector", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Выберите адрес на карте", comment: "")
      }
      
      /// Base translation: Выполняется заказ
      /// 
      /// Locales: Base, en
      static func inProgressRideStatus(_: Void = ()) -> String {
        return NSLocalizedString("InProgressRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Выполняется заказ", comment: "")
      }
      
      /// Base translation: Выполняется назначение авто
      /// 
      /// Locales: Base, en
      static func newRideStatus(_: Void = ()) -> String {
        return NSLocalizedString("NewRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Выполняется назначение авто", comment: "")
      }
      
      /// Base translation: Добавить карту
      /// 
      /// Locales: Base, en
      static func addCard(_: Void = ()) -> String {
        return NSLocalizedString("AddCard", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Добавить карту", comment: "")
      }
      
      /// Base translation: Доп. услуги (+ %@)
      /// 
      /// Locales: Base, en
      static func additionalServicesFormat(_ value1: String) -> String {
        return String(format: NSLocalizedString("AdditionalServicesFormat", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Доп. услуги (+ %@)", comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Дополнительные услуги
      /// 
      /// Locales: Base, en
      static func additionalServices(_: Void = ()) -> String {
        return NSLocalizedString("AdditionalServices", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Дополнительные услуги", comment: "")
      }
      
      /// Base translation: Доступно обновление
      /// 
      /// Locales: Base, en
      static func appUpdateAlailable(_: Void = ()) -> String {
        return NSLocalizedString("AppUpdateAlailable", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Доступно обновление", comment: "")
      }
      
      /// Base translation: Заказ принят
      /// 
      /// Locales: Base, en
      static func orderAcceptedNewRideStatus(_: Void = ()) -> String {
        return NSLocalizedString("OrderAcceptedNewRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Заказ принят", comment: "")
      }
      
      /// Base translation: Заказ такси
      /// 
      /// Locales: Base, en
      static func taxiOrder(_: Void = ()) -> String {
        return NSLocalizedString("TaxiOrder", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Заказ такси", comment: "")
      }
      
      /// Base translation: Зачислены средства
      /// 
      /// Locales: Base, en
      static func moneyHaveCome(_: Void = ()) -> String {
        return NSLocalizedString("MoneyHaveCome", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Зачислены средства", comment: "")
      }
      
      /// Base translation: История поездок
      /// 
      /// Locales: Base, en
      static func ridesHistory(_: Void = ()) -> String {
        return NSLocalizedString("RidesHistory", tableName: "Localization+Title", bundle: R.hostingBundle, value: "История поездок", comment: "")
      }
      
      /// Base translation: К вам едет автомобиль
      /// 
      /// Locales: Base, en
      static func acceptedRideStatus(_: Void = ()) -> String {
        return NSLocalizedString("AcceptedRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, value: "К вам едет автомобиль", comment: "")
      }
      
      /// Base translation: Комментарий
      /// 
      /// Locales: Base, en
      static func message(_: Void = ()) -> String {
        return NSLocalizedString("Message", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Комментарий", comment: "")
      }
      
      /// Base translation: Комментарий для водителя
      /// 
      /// Locales: Base, en
      static func messageForDriver(_: Void = ()) -> String {
        return NSLocalizedString("MessageForDriver", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Комментарий для водителя", comment: "")
      }
      
      /// Base translation: Любимые адреса
      /// 
      /// Locales: Base, en
      static func places(_: Void = ()) -> String {
        return NSLocalizedString("Places", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Любимые адреса", comment: "")
      }
      
      /// Base translation: Настройки
      /// 
      /// Locales: Base, en
      static func settings(_: Void = ()) -> String {
        return NSLocalizedString("Settings", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Настройки", comment: "")
      }
      
      /// Base translation: Настройки push
      /// 
      /// Locales: Base, en
      static func pushSettings(_: Void = ()) -> String {
        return NSLocalizedString("PushSettings", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Настройки push", comment: "")
      }
      
      /// Base translation: О приложении
      /// 
      /// Locales: Base, en
      static func aboutApp(_: Void = ()) -> String {
        return NSLocalizedString("AboutApp", tableName: "Localization+Title", bundle: R.hostingBundle, value: "О приложении", comment: "")
      }
      
      /// Base translation: Оплата
      /// 
      /// Locales: Base, en
      static func payment(_: Void = ()) -> String {
        return NSLocalizedString("Payment", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Оплата", comment: "")
      }
      
      /// Base translation: Оставьте отзыв
      /// 
      /// Locales: Base, en
      static func feedback(_: Void = ()) -> String {
        return NSLocalizedString("Feedback", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Оставьте отзыв", comment: "")
      }
      
      /// Base translation: Откуда поедем
      /// 
      /// Locales: Base, en
      static func fromAddress(_: Void = ()) -> String {
        return NSLocalizedString("FromAddress", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Откуда поедем", comment: "")
      }
      
      /// Base translation: Оцените поездку
      /// 
      /// Locales: Base, en
      static func evaluateRide(_: Void = ()) -> String {
        return NSLocalizedString("EvaluateRide", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Оцените поездку", comment: "")
      }
      
      /// Base translation: Поездка отменена
      /// 
      /// Locales: Base, en
      static func rideCancelled(_: Void = ()) -> String {
        return NSLocalizedString("RideCancelled", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Поездка отменена", comment: "")
      }
      
      /// Base translation: Промокоды
      /// 
      /// Locales: Base, en
      static func promo(_: Void = ()) -> String {
        return NSLocalizedString("Promo", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Промокоды", comment: "")
      }
      
      /// Base translation: Профиль
      /// 
      /// Locales: Base, en
      static func profile(_: Void = ()) -> String {
        return NSLocalizedString("Profile", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Профиль", comment: "")
      }
      
      /// Base translation: Такси подано!
      /// 
      /// Locales: Base, en
      static func arrivedRideStatus(_: Void = ()) -> String {
        return NSLocalizedString("ArrivedRideStatus", tableName: "Localization+Title", bundle: R.hostingBundle, value: "Такси подано!", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizationUI` struct is generated, and contains static references to 90 localization keys.
    struct localizationUI {
      /// Base translation: Email
      /// 
      /// Locales: Base, en
      static let label_email = Rswift.StringResource(key: "label_email", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Push-уведомлением
      /// 
      /// Locales: Base, en
      static let label_bypush_settingscontroller = Rswift.StringResource(key: "label_bypush_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Push-уведомления
      /// 
      /// Locales: Base, en
      static let label_infopush_settingscontroller = Rswift.StringResource(key: "label_infopush_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: SMS
      /// 
      /// Locales: Base, en
      static let label_sms = Rswift.StringResource(key: "label_sms", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Аэропорты и вокзалы
      /// 
      /// Locales: Base, en
      static let button_terminals = Rswift.StringResource(key: "button_terminals", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Бонусный счет
      /// 
      /// Locales: Base, en
      static let label_bonusaccount = Rswift.StringResource(key: "label_bonusaccount", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ваш номер телефона
      /// 
      /// Locales: Base, en
      static let textfield_placeholder_number_phonenumbercontroller = Rswift.StringResource(key: "textfield_placeholder_number_phonenumbercontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Введите адрес
      /// 
      /// Locales: Base, en
      static let textfield_placeholder_inputaddress = Rswift.StringResource(key: "textfield_placeholder_inputaddress", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ввести код
      /// 
      /// Locales: Base, en
      static let label_entercode = Rswift.StringResource(key: "label_entercode", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Вежливый водитель
      /// 
      /// Locales: Base, en
      static let button_politedriver = Rswift.StringResource(key: "button_politedriver", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Водитель
      /// 
      /// Locales: Base, en
      static let label_driver = Rswift.StringResource(key: "label_driver", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Водителю будет проще найти вас по фото
      /// 
      /// Locales: Base, en
      static let label_profilephotohint = Rswift.StringResource(key: "label_profilephotohint", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Время подачи:
      /// 
      /// Locales: Base, en
      static let label_pickuptime = Rswift.StringResource(key: "label_pickuptime", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Время указывается в часовом поясе места подачи
      /// 
      /// Locales: Base, en
      static let label_info_timechoicetablecontroller = Rswift.StringResource(key: "label_info_timechoicetablecontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выберите адрес
      /// 
      /// Locales: Base, en
      static let label_chooseaddress = Rswift.StringResource(key: "label_chooseaddress", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выбрать на карте
      /// 
      /// Locales: Base, en
      static let button_chooseonmap = Rswift.StringResource(key: "button_chooseonmap", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Вызвал другое такси
      /// 
      /// Locales: Base, en
      static let button_callanothertaxi = Rswift.StringResource(key: "button_callanothertaxi", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Выйти из профиля
      /// 
      /// Locales: Base, en
      static let button_logout = Rswift.StringResource(key: "button_logout", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Грязный автомобиль
      /// 
      /// Locales: Base, en
      static let button_dirtyauto = Rswift.StringResource(key: "button_dirtyauto", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Диспетчер
      /// 
      /// Locales: Base, en
      static let label_dispatcher = Rswift.StringResource(key: "label_dispatcher", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавить адрес
      /// 
      /// Locales: Base, en
      static let button_addaddress = Rswift.StringResource(key: "button_addaddress", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавить адрес назначения
      /// 
      /// Locales: Base, en
      static let button_adddestinationpoint = Rswift.StringResource(key: "button_adddestinationpoint", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавить карту
      /// 
      /// Locales: Base, en
      static let button_addcard = Rswift.StringResource(key: "button_addcard", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавить комментарий
      /// 
      /// Locales: Base, en
      static let button_addcomment = Rswift.StringResource(key: "button_addcomment", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавьте  любимый адрес
      /// 
      /// Locales: Base, en
      static let label_addfavoriteaddress = Rswift.StringResource(key: "label_addfavoriteaddress", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Добавьте рабочий или домашний адрес. Его можно будет выбрать при заказе такси.
      /// 
      /// Locales: Base, en
      static let label_addfavoriteaddresshint = Rswift.StringResource(key: "label_addfavoriteaddresshint", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Доп. услуги
      /// 
      /// Locales: Base, en
      static let button_additional_services = Rswift.StringResource(key: "button_additional_services", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Если у вас возникли проблемы с приложением, обратитесь в службу поддержки. Вам помогут во всем разобраться.
      /// 
      /// Locales: Base, en
      static let label_feedbackgoodtitle = Rswift.StringResource(key: "label_feedbackgoodtitle", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Заказать такси
      /// 
      /// Locales: Base, en
      static let button_ordertaxi = Rswift.StringResource(key: "button_ordertaxi", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Звонком на телефон
      /// 
      /// Locales: Base, en
      static let label_byphonecall_settingscontroller = Rswift.StringResource(key: "label_byphonecall_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Здесь появятся  завершенные поездки
      /// 
      /// Locales: Base, en
      static let label_rideswillappear = Rswift.StringResource(key: "label_rideswillappear", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Имя
      /// 
      /// Locales: Base, en
      static let label_name = Rswift.StringResource(key: "label_name", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: История поездок
      /// 
      /// Locales: Base, en
      static let label_ridehistory_menu = Rswift.StringResource(key: "label_ridehistory_menu", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Итого
      /// 
      /// Locales: Base, en
      static let label_total = Rswift.StringResource(key: "label_total", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Их можно потратить на поездки
      /// 
      /// Locales: Base, en
      static let label_promopurpose = Rswift.StringResource(key: "label_promopurpose", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Как можно быстрее
      /// 
      /// Locales: Base, en
      static let label_fastesttime = Rswift.StringResource(key: "label_fastesttime", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Код из SMS
      /// 
      /// Locales: Base, en
      static let label_smscode_otp = Rswift.StringResource(key: "label_smscode_otp", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Комфортная атмосфера
      /// 
      /// Locales: Base, en
      static let button_comfortatmosphere = Rswift.StringResource(key: "button_comfortatmosphere", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Латвия
      /// 
      /// Locales: Base, en
      static let label_countryname_latvia = Rswift.StringResource(key: "label_countryname_latvia", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Любимые адреса
      /// 
      /// Locales: Base, en
      static let label_favoriteaddresses_menu = Rswift.StringResource(key: "label_favoriteaddresses_menu", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Можно отправить 5 кодов
      /// 
      /// Locales: Base, en
      static let label_sendpromohint = Rswift.StringResource(key: "label_sendpromohint", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Наличными
      /// 
      /// Locales: Base, en
      static let label_cash_payment = Rswift.StringResource(key: "label_cash_payment", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Написать в AppStore
      /// 
      /// Locales: Base, en
      static let label_writetoappstore = Rswift.StringResource(key: "label_writetoappstore", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Написать в поддержку
      /// 
      /// Locales: Base, en
      static let label_writetosupport = Rswift.StringResource(key: "label_writetosupport", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Настройки
      /// 
      /// Locales: Base, en
      static let label_settings_menu = Rswift.StringResource(key: "label_settings_menu", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Начислено по промокоду
      /// 
      /// Locales: Base, en
      static let label_promo_profilecontroller = Rswift.StringResource(key: "label_promo_profilecontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Невежливый водитель
      /// 
      /// Locales: Base, en
      static let button_impolitedriver = Rswift.StringResource(key: "button_impolitedriver", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Некомфортная атмосфера
      /// 
      /// Locales: Base, en
      static let button_uncomfortableatmosphere = Rswift.StringResource(key: "button_uncomfortableatmosphere", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Ничего не найдено
      /// 
      /// Locales: Base, en
      static let label_geocode_nothing_found = Rswift.StringResource(key: "label_geocode_nothing_found", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Новости
      /// 
      /// Locales: Base, en
      static let label_pushnews = Rswift.StringResource(key: "label_pushnews", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Нужна регистрация
      /// 
      /// Locales: Base, en
      static let label_needregister = Rswift.StringResource(key: "label_needregister", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: О приложении
      /// 
      /// Locales: Base, en
      static let button_aboutapp = Rswift.StringResource(key: "button_aboutapp", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Опасное вождение
      /// 
      /// Locales: Base, en
      static let button_dangerousdriving = Rswift.StringResource(key: "button_dangerousdriving", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оплата
      /// 
      /// Locales: Base, en
      static let label_payment = Rswift.StringResource(key: "label_payment", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оплата:
      /// 
      /// Locales: Base, en
      static let label_paymentmethod = Rswift.StringResource(key: "label_paymentmethod", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оповещать о прибытии такси
      /// 
      /// Locales: Base, en
      static let label_notify_settingscontroller = Rswift.StringResource(key: "label_notify_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оставить отзыв
      /// 
      /// Locales: Base, en
      static let label_leavefeedback_menu = Rswift.StringResource(key: "label_leavefeedback_menu", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отменить поездку
      /// 
      /// Locales: Base, en
      static let button_cancel_ride = Rswift.StringResource(key: "button_cancel_ride", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отправить
      /// 
      /// Locales: Base, en
      static let button_send = Rswift.StringResource(key: "button_send", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отправить код
      /// 
      /// Locales: Base, en
      static let button_sendcode = Rswift.StringResource(key: "button_sendcode", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отправьте код
      /// 
      /// Locales: Base, en
      static let label_sendcode = Rswift.StringResource(key: "label_sendcode", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Отчет о поездке на email
      /// 
      /// Locales: Base, en
      static let label_reportonemail = Rswift.StringResource(key: "label_reportonemail", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Оценка
      /// 
      /// Locales: Base, en
      static let label_rate = Rswift.StringResource(key: "label_rate", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Повторить
      /// 
      /// Locales: Base, en
      static let button_repeat = Rswift.StringResource(key: "button_repeat", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Подарите другу 300 ₽  на первую поездку.
      /// 
      /// Locales: Base, en
      static let label_presentPromo = Rswift.StringResource(key: "label_presentPromo", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Поделитесь с нами, как бы вы хотели улучшить приложение. Мы обязательно учтём ваше пожелание в последующих версиях.
      /// 
      /// Locales: Base, en
      static let label_feedbackbadtitle = Rswift.StringResource(key: "label_feedbackbadtitle", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Поделиться с друзьями
      /// 
      /// Locales: Base, en
      static let label_sharewithfriends = Rswift.StringResource(key: "label_sharewithfriends", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Пока их нет. Но вы можете в любой момент заказать такси :)
      /// 
      /// Locales: Base, en
      static let label_rideswillappearhint = Rswift.StringResource(key: "label_rideswillappearhint", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Почему вы отменили поездку?
      /// 
      /// Locales: Base, en
      static let label_whycancel_profilcontroller = Rswift.StringResource(key: "label_whycancel_profilcontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Продолжить
      /// 
      /// Locales: Base, en
      static let button_continue = Rswift.StringResource(key: "button_continue", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Промо-акции
      /// 
      /// Locales: Base, en
      static let label_pushpromoactions = Rswift.StringResource(key: "label_pushpromoactions", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Промокод
      /// 
      /// Locales: Base, en
      static let textfield_placeholder_promo = Rswift.StringResource(key: "textfield_placeholder_promo", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Промокоды
      /// 
      /// Locales: Base, en
      static let label_promo_menu = Rswift.StringResource(key: "label_promo_menu", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Пропустить
      /// 
      /// Locales: Base, en
      static let button_skip = Rswift.StringResource(key: "button_skip", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Расскажите, что бы вы хотели в следующих версиях приложения. А ещё лучше – напишите об этом в AppStore.
      /// 
      /// Locales: Base, en
      static let label_feedbackexcellenttitle = Rswift.StringResource(key: "label_feedbackexcellenttitle", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Регистрация
      /// 
      /// Locales: Base, en
      static let button_register = Rswift.StringResource(key: "button_register", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Россия
      /// 
      /// Locales: Base, en
      static let label_countryname_phonenumbercontroller = Rswift.StringResource(key: "label_countryname_phonenumbercontroller", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Россия
      /// 
      /// Locales: Base, en
      static let label_countryname_russia = Rswift.StringResource(key: "label_countryname_russia", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Скачать и обновить
      /// 
      /// Locales: Base, en
      static let button_downloadnupdate = Rswift.StringResource(key: "button_downloadnupdate", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Сообщить об ошибке
      /// 
      /// Locales: Base, en
      static let button_report_a_bug = Rswift.StringResource(key: "button_report_a_bug", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Сохранить
      /// 
      /// Locales: Base, en
      static let button_save = Rswift.StringResource(key: "button_save", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Спасибо за отзыв
      /// 
      /// Locales: Base, en
      static let label_thank_you_for_feedback = Rswift.StringResource(key: "label_thank_you_for_feedback", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Телефон
      /// 
      /// Locales: Base, en
      static let label_phone = Rswift.StringResource(key: "label_phone", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: У вас есть промокод?
      /// 
      /// Locales: Base, en
      static let label_havepromo = Rswift.StringResource(key: "label_havepromo", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Указать точное время
      /// 
      /// Locales: Base, en
      static let label_accuratetime = Rswift.StringResource(key: "label_accuratetime", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Хорошее вождение
      /// 
      /// Locales: Base, en
      static let button_gooddriving = Rswift.StringResource(key: "button_gooddriving", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Чистый автомобиль 
      /// 
      /// Locales: Base, en
      static let button_clearauto = Rswift.StringResource(key: "button_clearauto", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Что вам не понравилось?
      /// 
      /// Locales: Base, en
      static let label_whatyoudontlike = Rswift.StringResource(key: "label_whatyoudontlike", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Что вам понравилось?
      /// 
      /// Locales: Base, en
      static let label_whatdoyoulike = Rswift.StringResource(key: "label_whatdoyoulike", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      /// Base translation: Чтобы воспользоваться данной функцией, нужно зарегистрироваться по номеру телефона. Это займет меньше минуты.  
      /// 
      /// Locales: Base, en
      static let label_registrationhint = Rswift.StringResource(key: "label_registrationhint", tableName: "Localization+UI", bundle: R.hostingBundle, locales: ["Base", "en"], comment: nil)
      
      /// Base translation: Email
      /// 
      /// Locales: Base, en
      static func label_email(_: Void = ()) -> String {
        return NSLocalizedString("label_email", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Email", comment: "")
      }
      
      /// Base translation: Push-уведомлением
      /// 
      /// Locales: Base, en
      static func label_bypush_settingscontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_bypush_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Push-уведомлением", comment: "")
      }
      
      /// Base translation: Push-уведомления
      /// 
      /// Locales: Base, en
      static func label_infopush_settingscontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_infopush_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Push-уведомления", comment: "")
      }
      
      /// Base translation: SMS
      /// 
      /// Locales: Base, en
      static func label_sms(_: Void = ()) -> String {
        return NSLocalizedString("label_sms", tableName: "Localization+UI", bundle: R.hostingBundle, value: "SMS", comment: "")
      }
      
      /// Base translation: Аэропорты и вокзалы
      /// 
      /// Locales: Base, en
      static func button_terminals(_: Void = ()) -> String {
        return NSLocalizedString("button_terminals", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Аэропорты и вокзалы", comment: "")
      }
      
      /// Base translation: Бонусный счет
      /// 
      /// Locales: Base, en
      static func label_bonusaccount(_: Void = ()) -> String {
        return NSLocalizedString("label_bonusaccount", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Бонусный счет", comment: "")
      }
      
      /// Base translation: Ваш номер телефона
      /// 
      /// Locales: Base, en
      static func textfield_placeholder_number_phonenumbercontroller(_: Void = ()) -> String {
        return NSLocalizedString("textfield_placeholder_number_phonenumbercontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Ваш номер телефона", comment: "")
      }
      
      /// Base translation: Введите адрес
      /// 
      /// Locales: Base, en
      static func textfield_placeholder_inputaddress(_: Void = ()) -> String {
        return NSLocalizedString("textfield_placeholder_inputaddress", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Введите адрес", comment: "")
      }
      
      /// Base translation: Ввести код
      /// 
      /// Locales: Base, en
      static func label_entercode(_: Void = ()) -> String {
        return NSLocalizedString("label_entercode", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Ввести код", comment: "")
      }
      
      /// Base translation: Вежливый водитель
      /// 
      /// Locales: Base, en
      static func button_politedriver(_: Void = ()) -> String {
        return NSLocalizedString("button_politedriver", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Вежливый водитель", comment: "")
      }
      
      /// Base translation: Водитель
      /// 
      /// Locales: Base, en
      static func label_driver(_: Void = ()) -> String {
        return NSLocalizedString("label_driver", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Водитель", comment: "")
      }
      
      /// Base translation: Водителю будет проще найти вас по фото
      /// 
      /// Locales: Base, en
      static func label_profilephotohint(_: Void = ()) -> String {
        return NSLocalizedString("label_profilephotohint", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Водителю будет проще найти вас по фото", comment: "")
      }
      
      /// Base translation: Время подачи:
      /// 
      /// Locales: Base, en
      static func label_pickuptime(_: Void = ()) -> String {
        return NSLocalizedString("label_pickuptime", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Время подачи:", comment: "")
      }
      
      /// Base translation: Время указывается в часовом поясе места подачи
      /// 
      /// Locales: Base, en
      static func label_info_timechoicetablecontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_info_timechoicetablecontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Время указывается в часовом поясе места подачи", comment: "")
      }
      
      /// Base translation: Выберите адрес
      /// 
      /// Locales: Base, en
      static func label_chooseaddress(_: Void = ()) -> String {
        return NSLocalizedString("label_chooseaddress", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Выберите адрес", comment: "")
      }
      
      /// Base translation: Выбрать на карте
      /// 
      /// Locales: Base, en
      static func button_chooseonmap(_: Void = ()) -> String {
        return NSLocalizedString("button_chooseonmap", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Выбрать на карте", comment: "")
      }
      
      /// Base translation: Вызвал другое такси
      /// 
      /// Locales: Base, en
      static func button_callanothertaxi(_: Void = ()) -> String {
        return NSLocalizedString("button_callanothertaxi", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Вызвал другое такси", comment: "")
      }
      
      /// Base translation: Выйти из профиля
      /// 
      /// Locales: Base, en
      static func button_logout(_: Void = ()) -> String {
        return NSLocalizedString("button_logout", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Выйти из профиля", comment: "")
      }
      
      /// Base translation: Грязный автомобиль
      /// 
      /// Locales: Base, en
      static func button_dirtyauto(_: Void = ()) -> String {
        return NSLocalizedString("button_dirtyauto", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Грязный автомобиль", comment: "")
      }
      
      /// Base translation: Диспетчер
      /// 
      /// Locales: Base, en
      static func label_dispatcher(_: Void = ()) -> String {
        return NSLocalizedString("label_dispatcher", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Диспетчер", comment: "")
      }
      
      /// Base translation: Добавить адрес
      /// 
      /// Locales: Base, en
      static func button_addaddress(_: Void = ()) -> String {
        return NSLocalizedString("button_addaddress", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Добавить адрес", comment: "")
      }
      
      /// Base translation: Добавить адрес назначения
      /// 
      /// Locales: Base, en
      static func button_adddestinationpoint(_: Void = ()) -> String {
        return NSLocalizedString("button_adddestinationpoint", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Добавить адрес назначения", comment: "")
      }
      
      /// Base translation: Добавить карту
      /// 
      /// Locales: Base, en
      static func button_addcard(_: Void = ()) -> String {
        return NSLocalizedString("button_addcard", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Добавить карту", comment: "")
      }
      
      /// Base translation: Добавить комментарий
      /// 
      /// Locales: Base, en
      static func button_addcomment(_: Void = ()) -> String {
        return NSLocalizedString("button_addcomment", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Добавить комментарий", comment: "")
      }
      
      /// Base translation: Добавьте  любимый адрес
      /// 
      /// Locales: Base, en
      static func label_addfavoriteaddress(_: Void = ()) -> String {
        return NSLocalizedString("label_addfavoriteaddress", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Добавьте \nлюбимый адрес", comment: "")
      }
      
      /// Base translation: Добавьте рабочий или домашний адрес. Его можно будет выбрать при заказе такси.
      /// 
      /// Locales: Base, en
      static func label_addfavoriteaddresshint(_: Void = ()) -> String {
        return NSLocalizedString("label_addfavoriteaddresshint", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Добавьте рабочий или домашний адрес.\nЕго можно будет выбрать при заказе такси.", comment: "")
      }
      
      /// Base translation: Доп. услуги
      /// 
      /// Locales: Base, en
      static func button_additional_services(_: Void = ()) -> String {
        return NSLocalizedString("button_additional_services", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Доп. услуги", comment: "")
      }
      
      /// Base translation: Если у вас возникли проблемы с приложением, обратитесь в службу поддержки. Вам помогут во всем разобраться.
      /// 
      /// Locales: Base, en
      static func label_feedbackgoodtitle(_: Void = ()) -> String {
        return NSLocalizedString("label_feedbackgoodtitle", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Если у вас возникли проблемы с приложением, обратитесь в службу поддержки. Вам помогут во всем разобраться.", comment: "")
      }
      
      /// Base translation: Заказать такси
      /// 
      /// Locales: Base, en
      static func button_ordertaxi(_: Void = ()) -> String {
        return NSLocalizedString("button_ordertaxi", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Заказать такси", comment: "")
      }
      
      /// Base translation: Звонком на телефон
      /// 
      /// Locales: Base, en
      static func label_byphonecall_settingscontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_byphonecall_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Звонком на телефон", comment: "")
      }
      
      /// Base translation: Здесь появятся  завершенные поездки
      /// 
      /// Locales: Base, en
      static func label_rideswillappear(_: Void = ()) -> String {
        return NSLocalizedString("label_rideswillappear", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Здесь появятся \nзавершенные поездки", comment: "")
      }
      
      /// Base translation: Имя
      /// 
      /// Locales: Base, en
      static func label_name(_: Void = ()) -> String {
        return NSLocalizedString("label_name", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Имя", comment: "")
      }
      
      /// Base translation: История поездок
      /// 
      /// Locales: Base, en
      static func label_ridehistory_menu(_: Void = ()) -> String {
        return NSLocalizedString("label_ridehistory_menu", tableName: "Localization+UI", bundle: R.hostingBundle, value: "История поездок", comment: "")
      }
      
      /// Base translation: Итого
      /// 
      /// Locales: Base, en
      static func label_total(_: Void = ()) -> String {
        return NSLocalizedString("label_total", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Итого", comment: "")
      }
      
      /// Base translation: Их можно потратить на поездки
      /// 
      /// Locales: Base, en
      static func label_promopurpose(_: Void = ()) -> String {
        return NSLocalizedString("label_promopurpose", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Их можно потратить на поездки", comment: "")
      }
      
      /// Base translation: Как можно быстрее
      /// 
      /// Locales: Base, en
      static func label_fastesttime(_: Void = ()) -> String {
        return NSLocalizedString("label_fastesttime", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Как можно быстрее", comment: "")
      }
      
      /// Base translation: Код из SMS
      /// 
      /// Locales: Base, en
      static func label_smscode_otp(_: Void = ()) -> String {
        return NSLocalizedString("label_smscode_otp", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Код из SMS", comment: "")
      }
      
      /// Base translation: Комфортная атмосфера
      /// 
      /// Locales: Base, en
      static func button_comfortatmosphere(_: Void = ()) -> String {
        return NSLocalizedString("button_comfortatmosphere", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Комфортная атмосфера", comment: "")
      }
      
      /// Base translation: Латвия
      /// 
      /// Locales: Base, en
      static func label_countryname_latvia(_: Void = ()) -> String {
        return NSLocalizedString("label_countryname_latvia", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Латвия", comment: "")
      }
      
      /// Base translation: Любимые адреса
      /// 
      /// Locales: Base, en
      static func label_favoriteaddresses_menu(_: Void = ()) -> String {
        return NSLocalizedString("label_favoriteaddresses_menu", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Любимые адреса", comment: "")
      }
      
      /// Base translation: Можно отправить 5 кодов
      /// 
      /// Locales: Base, en
      static func label_sendpromohint(_: Void = ()) -> String {
        return NSLocalizedString("label_sendpromohint", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Можно отправить 5 кодов", comment: "")
      }
      
      /// Base translation: Наличными
      /// 
      /// Locales: Base, en
      static func label_cash_payment(_: Void = ()) -> String {
        return NSLocalizedString("label_cash_payment", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Наличными", comment: "")
      }
      
      /// Base translation: Написать в AppStore
      /// 
      /// Locales: Base, en
      static func label_writetoappstore(_: Void = ()) -> String {
        return NSLocalizedString("label_writetoappstore", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Написать в AppStore", comment: "")
      }
      
      /// Base translation: Написать в поддержку
      /// 
      /// Locales: Base, en
      static func label_writetosupport(_: Void = ()) -> String {
        return NSLocalizedString("label_writetosupport", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Написать в поддержку", comment: "")
      }
      
      /// Base translation: Настройки
      /// 
      /// Locales: Base, en
      static func label_settings_menu(_: Void = ()) -> String {
        return NSLocalizedString("label_settings_menu", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Настройки", comment: "")
      }
      
      /// Base translation: Начислено по промокоду
      /// 
      /// Locales: Base, en
      static func label_promo_profilecontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_promo_profilecontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Начислено по промокоду", comment: "")
      }
      
      /// Base translation: Невежливый водитель
      /// 
      /// Locales: Base, en
      static func button_impolitedriver(_: Void = ()) -> String {
        return NSLocalizedString("button_impolitedriver", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Невежливый водитель", comment: "")
      }
      
      /// Base translation: Некомфортная атмосфера
      /// 
      /// Locales: Base, en
      static func button_uncomfortableatmosphere(_: Void = ()) -> String {
        return NSLocalizedString("button_uncomfortableatmosphere", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Некомфортная атмосфера", comment: "")
      }
      
      /// Base translation: Ничего не найдено
      /// 
      /// Locales: Base, en
      static func label_geocode_nothing_found(_: Void = ()) -> String {
        return NSLocalizedString("label_geocode_nothing_found", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Ничего не найдено", comment: "")
      }
      
      /// Base translation: Новости
      /// 
      /// Locales: Base, en
      static func label_pushnews(_: Void = ()) -> String {
        return NSLocalizedString("label_pushnews", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Новости", comment: "")
      }
      
      /// Base translation: Нужна регистрация
      /// 
      /// Locales: Base, en
      static func label_needregister(_: Void = ()) -> String {
        return NSLocalizedString("label_needregister", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Нужна регистрация", comment: "")
      }
      
      /// Base translation: О приложении
      /// 
      /// Locales: Base, en
      static func button_aboutapp(_: Void = ()) -> String {
        return NSLocalizedString("button_aboutapp", tableName: "Localization+UI", bundle: R.hostingBundle, value: "О приложении", comment: "")
      }
      
      /// Base translation: Опасное вождение
      /// 
      /// Locales: Base, en
      static func button_dangerousdriving(_: Void = ()) -> String {
        return NSLocalizedString("button_dangerousdriving", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Опасное вождение", comment: "")
      }
      
      /// Base translation: Оплата
      /// 
      /// Locales: Base, en
      static func label_payment(_: Void = ()) -> String {
        return NSLocalizedString("label_payment", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Оплата", comment: "")
      }
      
      /// Base translation: Оплата:
      /// 
      /// Locales: Base, en
      static func label_paymentmethod(_: Void = ()) -> String {
        return NSLocalizedString("label_paymentmethod", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Оплата:", comment: "")
      }
      
      /// Base translation: Оповещать о прибытии такси
      /// 
      /// Locales: Base, en
      static func label_notify_settingscontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_notify_settingscontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Оповещать о прибытии такси", comment: "")
      }
      
      /// Base translation: Оставить отзыв
      /// 
      /// Locales: Base, en
      static func label_leavefeedback_menu(_: Void = ()) -> String {
        return NSLocalizedString("label_leavefeedback_menu", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Оставить отзыв", comment: "")
      }
      
      /// Base translation: Отменить поездку
      /// 
      /// Locales: Base, en
      static func button_cancel_ride(_: Void = ()) -> String {
        return NSLocalizedString("button_cancel_ride", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Отменить поездку", comment: "")
      }
      
      /// Base translation: Отправить
      /// 
      /// Locales: Base, en
      static func button_send(_: Void = ()) -> String {
        return NSLocalizedString("button_send", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Отправить", comment: "")
      }
      
      /// Base translation: Отправить код
      /// 
      /// Locales: Base, en
      static func button_sendcode(_: Void = ()) -> String {
        return NSLocalizedString("button_sendcode", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Отправить код", comment: "")
      }
      
      /// Base translation: Отправьте код
      /// 
      /// Locales: Base, en
      static func label_sendcode(_: Void = ()) -> String {
        return NSLocalizedString("label_sendcode", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Отправьте код", comment: "")
      }
      
      /// Base translation: Отчет о поездке на email
      /// 
      /// Locales: Base, en
      static func label_reportonemail(_: Void = ()) -> String {
        return NSLocalizedString("label_reportonemail", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Отчет о поездке на email", comment: "")
      }
      
      /// Base translation: Оценка
      /// 
      /// Locales: Base, en
      static func label_rate(_: Void = ()) -> String {
        return NSLocalizedString("label_rate", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Оценка", comment: "")
      }
      
      /// Base translation: Повторить
      /// 
      /// Locales: Base, en
      static func button_repeat(_: Void = ()) -> String {
        return NSLocalizedString("button_repeat", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Повторить", comment: "")
      }
      
      /// Base translation: Подарите другу 300 ₽  на первую поездку.
      /// 
      /// Locales: Base, en
      static func label_presentPromo(_: Void = ()) -> String {
        return NSLocalizedString("label_presentPromo", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Подарите другу 300 ₽ \nна первую поездку.", comment: "")
      }
      
      /// Base translation: Поделитесь с нами, как бы вы хотели улучшить приложение. Мы обязательно учтём ваше пожелание в последующих версиях.
      /// 
      /// Locales: Base, en
      static func label_feedbackbadtitle(_: Void = ()) -> String {
        return NSLocalizedString("label_feedbackbadtitle", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Поделитесь с нами, как бы вы хотели улучшить приложение. Мы обязательно учтём ваше пожелание в последующих версиях.", comment: "")
      }
      
      /// Base translation: Поделиться с друзьями
      /// 
      /// Locales: Base, en
      static func label_sharewithfriends(_: Void = ()) -> String {
        return NSLocalizedString("label_sharewithfriends", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Поделиться с друзьями", comment: "")
      }
      
      /// Base translation: Пока их нет. Но вы можете в любой момент заказать такси :)
      /// 
      /// Locales: Base, en
      static func label_rideswillappearhint(_: Void = ()) -> String {
        return NSLocalizedString("label_rideswillappearhint", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Пока их нет. Но вы можете в любой момент заказать такси :)", comment: "")
      }
      
      /// Base translation: Почему вы отменили поездку?
      /// 
      /// Locales: Base, en
      static func label_whycancel_profilcontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_whycancel_profilcontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Почему вы отменили поездку?", comment: "")
      }
      
      /// Base translation: Продолжить
      /// 
      /// Locales: Base, en
      static func button_continue(_: Void = ()) -> String {
        return NSLocalizedString("button_continue", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Продолжить", comment: "")
      }
      
      /// Base translation: Промо-акции
      /// 
      /// Locales: Base, en
      static func label_pushpromoactions(_: Void = ()) -> String {
        return NSLocalizedString("label_pushpromoactions", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Промо-акции", comment: "")
      }
      
      /// Base translation: Промокод
      /// 
      /// Locales: Base, en
      static func textfield_placeholder_promo(_: Void = ()) -> String {
        return NSLocalizedString("textfield_placeholder_promo", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Промокод", comment: "")
      }
      
      /// Base translation: Промокоды
      /// 
      /// Locales: Base, en
      static func label_promo_menu(_: Void = ()) -> String {
        return NSLocalizedString("label_promo_menu", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Промокоды", comment: "")
      }
      
      /// Base translation: Пропустить
      /// 
      /// Locales: Base, en
      static func button_skip(_: Void = ()) -> String {
        return NSLocalizedString("button_skip", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Пропустить", comment: "")
      }
      
      /// Base translation: Расскажите, что бы вы хотели в следующих версиях приложения. А ещё лучше – напишите об этом в AppStore.
      /// 
      /// Locales: Base, en
      static func label_feedbackexcellenttitle(_: Void = ()) -> String {
        return NSLocalizedString("label_feedbackexcellenttitle", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Расскажите, что бы вы хотели в следующих версиях приложения. А ещё лучше – напишите об этом в AppStore.", comment: "")
      }
      
      /// Base translation: Регистрация
      /// 
      /// Locales: Base, en
      static func button_register(_: Void = ()) -> String {
        return NSLocalizedString("button_register", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Регистрация", comment: "")
      }
      
      /// Base translation: Россия
      /// 
      /// Locales: Base, en
      static func label_countryname_phonenumbercontroller(_: Void = ()) -> String {
        return NSLocalizedString("label_countryname_phonenumbercontroller", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Россия", comment: "")
      }
      
      /// Base translation: Россия
      /// 
      /// Locales: Base, en
      static func label_countryname_russia(_: Void = ()) -> String {
        return NSLocalizedString("label_countryname_russia", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Россия", comment: "")
      }
      
      /// Base translation: Скачать и обновить
      /// 
      /// Locales: Base, en
      static func button_downloadnupdate(_: Void = ()) -> String {
        return NSLocalizedString("button_downloadnupdate", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Скачать и обновить", comment: "")
      }
      
      /// Base translation: Сообщить об ошибке
      /// 
      /// Locales: Base, en
      static func button_report_a_bug(_: Void = ()) -> String {
        return NSLocalizedString("button_report_a_bug", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Сообщить об ошибке", comment: "")
      }
      
      /// Base translation: Сохранить
      /// 
      /// Locales: Base, en
      static func button_save(_: Void = ()) -> String {
        return NSLocalizedString("button_save", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Сохранить", comment: "")
      }
      
      /// Base translation: Спасибо за отзыв
      /// 
      /// Locales: Base, en
      static func label_thank_you_for_feedback(_: Void = ()) -> String {
        return NSLocalizedString("label_thank_you_for_feedback", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Спасибо за отзыв", comment: "")
      }
      
      /// Base translation: Телефон
      /// 
      /// Locales: Base, en
      static func label_phone(_: Void = ()) -> String {
        return NSLocalizedString("label_phone", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Телефон", comment: "")
      }
      
      /// Base translation: У вас есть промокод?
      /// 
      /// Locales: Base, en
      static func label_havepromo(_: Void = ()) -> String {
        return NSLocalizedString("label_havepromo", tableName: "Localization+UI", bundle: R.hostingBundle, value: "У вас есть промокод?", comment: "")
      }
      
      /// Base translation: Указать точное время
      /// 
      /// Locales: Base, en
      static func label_accuratetime(_: Void = ()) -> String {
        return NSLocalizedString("label_accuratetime", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Указать точное время", comment: "")
      }
      
      /// Base translation: Хорошее вождение
      /// 
      /// Locales: Base, en
      static func button_gooddriving(_: Void = ()) -> String {
        return NSLocalizedString("button_gooddriving", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Хорошее вождение", comment: "")
      }
      
      /// Base translation: Чистый автомобиль 
      /// 
      /// Locales: Base, en
      static func button_clearauto(_: Void = ()) -> String {
        return NSLocalizedString("button_clearauto", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Чистый автомобиль ", comment: "")
      }
      
      /// Base translation: Что вам не понравилось?
      /// 
      /// Locales: Base, en
      static func label_whatyoudontlike(_: Void = ()) -> String {
        return NSLocalizedString("label_whatyoudontlike", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Что вам не понравилось?", comment: "")
      }
      
      /// Base translation: Что вам понравилось?
      /// 
      /// Locales: Base, en
      static func label_whatdoyoulike(_: Void = ()) -> String {
        return NSLocalizedString("label_whatdoyoulike", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Что вам понравилось?", comment: "")
      }
      
      /// Base translation: Чтобы воспользоваться данной функцией, нужно зарегистрироваться по номеру телефона. Это займет меньше минуты.  
      /// 
      /// Locales: Base, en
      static func label_registrationhint(_: Void = ()) -> String {
        return NSLocalizedString("label_registrationhint", tableName: "Localization+UI", bundle: R.hostingBundle, value: "Чтобы воспользоваться данной функцией, нужно зарегистрироваться по номеру телефона. Это займет меньше минуты.  ", comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashScreenController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let songController = StoryboardViewControllerResource<SongController>(identifier: "SongController")
      let tabBarController = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "TabBarController")
      
      func songController(_: Void = ()) -> SongController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: songController)
      }
      
      func tabBarController(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabBarController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "second") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'second' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "first") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'first' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().songController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'songController' could not be loaded from storyboard 'Main' as 'SongController'.") }
        if _R.storyboard.main().tabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabBarController' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
